/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package app.dependency.update;

import static app.dependency.update.app.util.CommonUtils.*;
import static app.dependency.update.app.util.ConstantUtils.*;

import app.dependency.update.app.exception.AppDependencyUpdateRuntimeException;
import java.util.Collections;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;
import org.springframework.scheduling.annotation.EnableScheduling;

@Slf4j
@SpringBootApplication
@EnableCaching
@EnableScheduling
@EnableMongoRepositories
public class App {

  public static void main(String[] args) {
    log.info("Begin app-dependency-update initialization...");
    validateInput();
    SpringApplication app = new SpringApplication(App.class);
    app.setDefaultProperties(
        Collections.singletonMap("server.port", getSystemEnvProperty(SERVER_PORT, "8888")));
    app.run(args);
    log.info("End app-dependency-update initialization...");
  }

  private static void validateInput() {
    if (getSystemEnvProperty(PARAM_REPO_HOME, null) == null) {
      throw new AppDependencyUpdateRuntimeException("repo_home env property must be provided");
    }
    if (getSystemEnvProperty(ENV_MONGO_USERNAME, null) == null) {
      throw new AppDependencyUpdateRuntimeException("mongo_user env property must be provided");
    }
    if (getSystemEnvProperty(ENV_MONGO_PASSWORD, null) == null) {
      throw new AppDependencyUpdateRuntimeException("mongo_pwd env property must be provided");
    }
    if (getSystemEnvProperty(ENV_MJ_EMAIL_ADDRESS, null) == null) {
      throw new AppDependencyUpdateRuntimeException("mj_email env property must be provided");
    }
    if (getSystemEnvProperty(ENV_MJ_APIKEY_PUBLIC, null) == null) {
      throw new AppDependencyUpdateRuntimeException("mj_public env property must be provided");
    }
    if (getSystemEnvProperty(ENV_MJ_APIKEY_PRIVATE, null) == null) {
      throw new AppDependencyUpdateRuntimeException("mj_private env property must be provided");
    }
  }
}
